<tool id="readmap_multi_lattice_comp" name="Plot multiple map Lattices" version="0.0.1">
	<description>for comparison</description>
          <requirements>
            <requirement type="package" version="3.1.2">R</requirement>
            <requirement type="package" version="2.14">biocbasics</requirement>
          </requirements>
	<command interpreter="bash">Rscript $Rplotter</command>

    <inputs>
        <param name="title" type="text" label="Graph Title"/>
        <repeat name="queries" title="Additional Lattice dataframe">
            <param name="input" type="data" label="Select" />
            <param name="norm" type="float" value="1.0" label="Normalization factor" />
        </repeat>
    </inputs>

  <configfiles>
    <configfile name="Rplotter">
      ## Setup R error handling to go to stderr
      options( show.error.messages=F, 
               error = function () { cat( geterrmessage(), file=stderr() ); q( "no", 1, F ) } )
      library(lattice)

      ##cheetahtemplate data frame implementation
      #set $T = 0
      #for $i, $q in enumerate ($queries)
        dataframe${i} = read.delim("${q.input}", header = T)
      #set $T += 1
      #end for
      ## dataframe0 dataframe1 dataframeN implemented and number of items at $T

      interitem = factor (dataframe0\$gene)
      #for $i, $q in enumerate ($queries)
        interitem = intersect(factor(interitem), factor(dataframe${i}\$gene))
      #end for

      #for $i, $q in enumerate ($queries)
        dataframe${i}=dataframe${i}[dataframe${i}\$gene %in% interitem,]
        dataframe${i}=transform(dataframe${i}, count=count*${q.norm})
      #end for

      #for $i, $q in enumerate ($queries)
        dataframe${i}[,1]=paste(dataframe${i}[,1], "S${i}")
      #end for

      bigframe= data.frame(matrix(ncol = 5, nrow = 0))
      #for $i, $q in enumerate ($queries)
        bigframe =rbind(bigframe, dataframe${i})
      #end for

      bigframe=bigframe[order(bigframe\$gene),]
      bigframe=transform(bigframe, count= ifelse(count&gt;=0, +1, -1) * log(1+abs(count),base=10)  ) ## for log10 representation
      pdf(file="${output}", paper="special", height=11.69, width=8.2677)

      xyplot(count~coord|gene, data=bigframe, group=polarity,
        type="h", col=c("red","blue"),
        origin = 0, horizontal=FALSE,
        lwd=1,
        as.table=T,
        main = "${title}",
        xlab = "Coordinates",
        ylab = "log10 Read counts",
        strip=strip.custom(which.given=1, bg="lightblue"),
        par.strip.text=list(cex=0.75),
        layout=c(${T},10)
        )


      dev.off()


    </configfile>
  </configfiles>




	<outputs>
		<data name="output" format="pdf"/>
	</outputs>
	<help>

**What it does**

temptative R plotter


	</help>
</tool>
