<tool id="cpm_tpm_rpk" name="Generate CPM, TPM, RPK" version="0.1.0">
	<description>from raw counts expression values</description>
    <requirements>
		<requirement type="package" version="1.6.0=r3.4.2">r-optparse</requirement>
    </requirements>
    <stdio>
        <exit_code range="1:" level="fatal" description="Tool exception" />
    </stdio>
    <command detect_errors="exit_code"><![CDATA[ 
Rscript $__tool_directory__/cpm_tpm_rpk.R 
-d $input 
-t $option.type_transfo 
-s $input_sep 
-c $input_header 
#if $option.type_transfo == "tpm":
-g $option.gene_file 
--gene_sep $option.gene_sep 
--gene_header $option.gene_header
#end if 
#if $option.type_transfo == "rpk":
-g $option.gene_file 
--gene_sep $option.gene_sep 
--gene_header $option.gene_header
#end if
-l $log
-o ${output}
]]></command>
	<inputs>
		<param name="input" type="data" format="txt" label="Raw counts of expression data"/>
		<param name="input_sep" type="select" label="Input column separator">
			<option value="tab" selected="true">Tabs</option>
			<option value=",">Comma</option>
			<option value="\ ">Whitespace</option>
			<option value=".">Dots</option>
                        <option value="_">Underscores</option>
                        <option value="-">Dashes</option>
		</param>
		<param name="input_header" type="select" label="Consider first line of input file as header?">
			<option value="TRUE" selected="true">Yes</option>
			<option value="FALSE">No</option>
		</param>
                <conditional name="option">
	                <param name="type_transfo" type="select" label="Type of transformation">
      		                <option value="cpm" selected="true">CPM</option>
               		        <option value="tpm">TPM</option>
               	        	<option value="rpk">RPK</option>
	               	</param>
			<when value="tpm">
				<param name="gene_file" type="data" format="txt" label="Gene length file"/> 
				<param name="gene_sep" type="select" label="Gene length column separator">
					<option value="tab" selected="true">Tabs</option>
   	        			<option value=",">Commas</option>
					<option value="\ ">Whitespaces</option>
					<option value=".">Dots</option>
					<option value="_">Underscores</option>
					<option value="-">Dashes</option>
				</param>
				<param name="gene_header" type="select" label="Consider first line of gene length file as header ?">
					<option value="TRUE" selected="true">Yes</option>
					<option value="FALSE">No</option>
				</param>
			</when>
                        <when value="rpk">
                                <param name="gene_file" type="data" format="txt" label="Gene length file"/>
                                <param name="gene_sep" type="select" label="Gene length column separator">
                                        <option value="tab" selected="true">Tabs</option>
                                        <option value=",">Commas</option>
                                        <option value="\ ">Whitespaces</option>
                                        <option value=".">Dots</option>
                                        <option value="_">Underscores</option>
                                        <option value="-">Dashes</option>
                                </param>
                                <param name="gene_header" type="select" label="Consider first line of gene length file as header ?">
                                        <option value="TRUE" selected="true">Yes</option>
                                        <option value="FALSE">No</option>
                                </param>
                        </when>

			<when value="cpm">
			</when>
		</conditional>
		<param name="log" type="select" label="Data should be log transformed ?">
			<option value="FALSE" selected="true">No</option>
			<option value="TRUE">Yes</option>
		</param>
	</inputs>
	<outputs>
                <data name="output" format="tabular" label="Transformation of raw counts" />
	</outputs>
    <tests>
        <test>
            <param name="input" value="counts.tab" ftype="tabular"/>
            <param name="type_transfo" value="cpm"/>
            <output name="output" file="cpm.tab" ftype="tabular"/>
        </test>
        <test>
            <param name="input" value="counts.tab" ftype="tabular"/>
            <param name="type_transfo" value="cpm"/>
            <param name="log" value="TRUE"/>
            <output name="output" file="logcpm.tab" ftype="tabular"/>
        </test>
        <test>
            <param name="input" value="counts.tab" ftype="tabular"/>
            <param name="type_transfo" value="tpm"/>
            <param name="gene_file" value="gene_length.tab" ftype="tabular"/>
            <param name="gene_header" value="FALSE"/>
            <output name="output" file="tpm.tab" ftype="tabular"/>
        </test>
        <test>
            <param name="input" value="counts.tab" ftype="tabular"/>
            <param name="type_transfo" value="tpm"/>
            <param name="gene_file" value="gene_length.tab" ftype="tabular"/>
            <param name="gene_header" value="FALSE"/>
            <param name="log" value="TRUE"/>
            <output name="output" file="logtpm.tab" ftype="tabular"/>
        </test>
        <test>
            <param name="input" value="counts.tab" ftype="tabular"/>
            <param name="type_transfo" value="rpk"/>
            <param name="gene_file" value="gene_length.tab" ftype="tabular"/>
            <param name="gene_header" value="FALSE"/>
            <output name="output" file="rpk.tab" ftype="tabular"/>
        </test>
        <test>
            <param name="input" value="counts.tab" ftype="tabular"/>
            <param name="type_transfo" value="rpk"/>
            <param name="gene_file" value="gene_length.tab" ftype="tabular"/>
            <param name="gene_header" value="FALSE"/>
            <param name="log" value="TRUE"/>
            <output name="output" file="logrpk.tab" ftype="tabular"/>
        </test>
    </tests>
    <help>

**What it does**

cpm_tpm_rpk takes a table of raw read counts, first column is gene names, others corresponding to sample counts and 
returns a table of transformed expression values to normalize either on library size with CPM (Count per Million) 
allowing between sample comparison. For each sample, to obtain CPM, counts are divided by the library size (counts 
sum) and then multiply this number by a million.

Otherwise, you can normalize on library size and gene length with TPM (Transcript per million) or only gene length 
with RPK (Reads Per Kilobase). The last two manipulations can only apply on full length RNA-sequencing because it
generates a biais if you normalize gene length with a 3'end sequencing. RPK is obtained by divided the read count
by the gene length in kilobase. For each sample, RPK is divided by the sum of RPK values and multiply by a million.
This gives you TPM.

Normalizations by gene lengths (TPM and RPK) require also a two column correspondance table gene_name - gene length
where the length must be in nucleotide.

cpm_tpm_rpk permits to log-transform the result of normalization, for example: log2(CPM +1).

    </help>
</tool>
