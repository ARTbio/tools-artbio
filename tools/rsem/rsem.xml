<tool id="rsem" name="RSEM" version="0.0.1">
  <description></description>
    <macros>
        <import>macros.xml</import>
    </macros>
  <requirements>
    <requirement type="package" version="1.3.0">rsem</requirement>
    <requirement type="package" version="1.1.2=py27_0">bowtie</requirement>
  </requirements>
  <stdio>
      <exit_code range="1:" level="fatal" />
  </stdio>
  <command detect_errors="exit_code"><![CDATA[
    echo $reference_name " " | tee $reference_file &&
    mkdir $reference_file.files_path &&
    cd $reference_file.files_path &&
    rsem-prepare-reference 
    #if $polya.polya_use == 'add':
      #if $polya.polya_length:
        --polyA-length $polya.polya_length
      #end if
    #elif $polya.polya_use == 'subset':
      --no-polyA-subset $polya.no_polya_subset
      #if $polya.polya_length:
        --polyA-length $polya.polya_length
      #end if
    #elif $polya.polya_use == 'none':
      --no-polyA
    #end if
    $ntog
    #if $transcript_to_gene_map:
      --transcript-to-gene-map $transcript_to_gene_map
    #end if
    --bowtie
    #if $self_reference.ref_type == 'transcripts':
      $self_reference.reference_fasta_file
    #else:
      --gtf $self_reference.gtf
      $self_reference.reference_fasta_file
    #end if
    $reference_name
    > ${reference_name}.log &&

    rsem-calculate-expression 
    ## --tag string
    #if $seedlength:
      --seed-length $seedlength 
    #end if
    --forward-prob $forward_prob
    #if $rsem_options.fullparams == 'fullset':
      ## Fragment info
      #if $rsem_options.fragment_length_mean:
        --fragment-length-mean $rsem_options.fragment_length_mean
      #end if
      #if $rsem_options.fragment_length_min:
        --fragment-length-min $rsem_options.fragment_length_min
      #end if
      #if $rsem_options.fragment_length_sd:
        --fragment-length-sd $rsem_options.fragment_length_sd
      #end if
      #if $rsem_options.fragment_length_max:
        --fragment-length-max $rsem_options.fragment_length_max
      #end if
      ## RSPD
      #if $rsem_options.rspd.estimate == 'yes':
        --estimate-rspd
        #if $rsem_options.rspd.num_rspd_bins:
          --num-rspd-bins $rsem_options.rspd.num_rspd_bins
        #end if
      #end if
      ## Calculate 95% credibility intervals and posterior mean estimates. 
      #if $rsem_options.useci.ci == 'yes':
        --calc-ci
        #if $rsem_options.useci.cimem:
          --ci-memory $rsem_options.useci.cimem
        #end if
      #end if
    #end if
    --num-threads \${GALAXY_SLOTS:-4}
    #if $input.format == 'fasta' and $input.bowtie_options.fullparams == 'fullset':
      ## Bowtie params
      #if $input.bowtie_options.bowtie_e:
      --bowtie-e $input.bowtie_options.bowtie_e
      #end if
      #if $input.bowtie_options.bowtie_m:
      --bowtie-m $input.bowtie_options.bowtie_m
      #end if
      --bowtie-n $input.bowtie_options.bowtie_n
    #end if
    #if $input.format == 'fastq' and $input.bowtie_options.fullparams == 'fullset':
      ## Bowtie params
      #if $input.bowtie_options.bowtie_e:
      --bowtie-e $input.bowtie_options.bowtie_e
      #end if
      #if $input.bowtie_options.bowtie_m:
      --bowtie-m $input.bowtie_options.bowtie_m
      #end if
      --bowtie-n $input.bowtie_options.bowtie_n
    #end if
    ## Outputs
    #if $rsem_outputs.result_bams == 'none':
      --no-bam-output
    #else
      #if $rsem_outputs.result_bams == 'both':
        --output-genome-bam
      #end if
      $rsem_outputs.sampling_for_bam
    #end if
    ## Input data
    #if $input.format=="fastq"
      $input.fastq_select
      #if $input.fastq.matepair=="single": 
        $input.fastq.singlefastq
      #elif $input.fastq.matepair=="paired":
        --paired-end
        $input.fastq.fastq1
        $input.fastq.fastq2
      #end if
    #elif $input.format=="fasta"
      --no-qualities
      #if $input.fasta.matepair=="single": 
        $input.fasta.singlefasta
      #elif $input.fasta.matepair=="paired":
        --paired-end
        $input.fasta.fasta1
        $input.fasta.fasta2
      #end if
    #elif $input.format=="sam"
      #if $input.matepair=="paired":
        --paired-end
      #end if
      #if $input.rsem_sam._extension == 'sam':
        --sam
      #elif $input.rsem_sam._extension == 'bam':
        --bam
      #end if
      $input.rsem_sam
    #end if
    ## RSEM reference
    #if $reference.refSrc == 'history':
      ${reference.rsem_ref.extra_files_path}/${reference.rsem_ref.metadata.reference_name}
    #elif $reference.refSrc == 'cached':
      ${reference.index.fields.path}
    #elif $reference.refSrc == 'self':
      ${reference_file.files_path}/${reference_name}
    #end if
    ## sample_name: use a hard coded name so we can pull out galaxy outputs
    rsem_output
    ## direct output into logfile
    > $log
  ]]></command>

  <inputs>
    <conditional name="self_reference">
      <param name="ref_type" type="select" label="Reference transcript source">
        <option value="transcripts">transcript fasta</option>
        <option value="genomic">reference genome and gtf</option>
      </param>
      <when value="transcripts">
        <param name="reference_fasta_file" type="data" format="fasta" label="reference fasta file" 
               help="The files should contain the sequences of transcripts."/>
      </when>
      <when value="genomic">
        <param name="reference_fasta_file" type="data" format="fasta" label="reference fasta file" 
               help="The file should contain the sequence of an entire genome."/>
        <param name="gtf" type="data" format="gtf" label="gtf" 
               help="extract transcript reference sequences using the gene annotations specified in this GTF" />
      </when>
    </conditional>
    <param name="transcript_to_gene_map" type="data" format="tabular" optional="true" label="Map of gene ids to transcript (isoform) ids" >
      <help>
        Each line of should be of the form: gene_id transcript_id ( with the two fields separated by a tab character )
        The map can be obtained from the UCSC table browser  
          group: Genes and Gene Prediction Tracks 
          table: knownIsoforms
        Without a map:
          If a reference genome and gtf is used, then RSEM uses the "gene_id" and "transcript_id" attributes in the GTF file. 
          Otherwise, RSEM assumes that each sequence in the reference sequence files is a separate gene.
      </help>
    </param>
    <param name="reference_name" type="text" value="rsem_ref_name" label="reference name">
      <help>A one word name for this RSEM reference containing only letters, digits, and underscore characters</help>
      <validator type="regex" message="Use only letters, digits, and underscore characters">^\w+$</validator>
    </param>
    <conditional name="polya">
      <param name="polya_use" type="select" label="PolyA ">
        <option value="add" selected="true">Add poly(A) tails to all transcripts</option>
        <option value="subset">Exclude poly(A) tails from selected transcripts</option>
        <option value="none">Do not add poly(A) tails to any transcripts</option>
      </param>
      <when value="add">
        <param name="polya_length" type="integer" value="125" optional="true" label="The length of the poly(A) tails to be added. (Default: 125)">
          <validator type="in_range" message="must be positive " min="1"/>
        </param>
      </when>
      <when value="subset">
        <param name="no_polya_subset" type="data" format="tabular" optional="true" label="List of transcript IDs (one per line) that should should not have polyA tails added."/> 
        <param name="polya_length" type="integer" value="125" optional="true" label="The length of the poly(A) tails to be added. (Default: 125)">
          <validator type="in_range" message="must be positive " min="1"/>
        </param>
      </when>
      <when value="none"/>
    </conditional>
    <param name="ntog" type="boolean" truevalue="--no-ntog" falsevalue="" checked="false" label="Disable the conversion of 'N' characters to 'G' characters in the reference sequences" help="Bowite uses the automatic N to G conversion to to align against all positions in the reference."/>



    <param name="sample" type="text" value="rsem_sample" label="Sample name" />
    <conditional name="reference">
      <param name="refSrc" type="select" label="RSEM Reference Source">
        <option value="cached">Locally cached</option>
        <option value="history">From your history</option>
        <option value="self">Prepare RSEM Reference with this tool</option>
      </param>
      <when value="cached">
        <param name="index" type="select" label="Select RSEM reference" help="Select from a list of pre-indexed references. If you don't see anything consult the wrapper's documentation on how to create or download a reference">
          <options from_data_table="s">
            <filter type="sort_by" column="2" />
            <validator type="no_options" message="No indexes are available" />
          </options>
        </param>
      </when>
      <when value="history">
        <param name="rsem_ref" type="data" format="rsem_ref" label="RSEM reference" />
      </when>
      <when value="self">
      </when>
    </conditional>
    <conditional name="input">
      <param name="format" type="select" label="RSEM Input file type">
        <option value="fastq">FASTQ</option>
        <option value="fasta">FASTA</option>
        <option value="sam">SAM/BAM</option>
      </param>
      <when value="fastq">
        <param name="fastq_select" size="15" type="select" label="FASTQ type" >
          <option value="--phred33-quals" selected="true">phred33 qualities (default for sanger)</option>
          <option value="--solexa-quals">solexa qualities</option>
          <option value="--phred64-quals">phred64 qualities</option>
        </param>
        <conditional name="fastq">
          <param name="matepair" type="select" label="Library type">
            <option value="single">Single End Reads</option>
            <option value="paired">Paired End Reads</option>
          </param>
          <when value="single">
            <param name="singlefastq" type="data" format="fastq" label="FASTQ file" />
          </when>
          <when value="paired">
            <param name="fastq1" type="data" format="fastq" label="Read 1 fastq file" />
            <param name="fastq2" type="data" format="fastq" label="Read 2 fastq file" />
          </when>
        </conditional>
        <expand macro="bowtie_options"/>
      </when>
      <when value="fasta">
        <conditional name="fasta">
          <param name="matepair" type="select" label="Library Type">
            <option value="single">Single End Reads</option>
            <option value="paired">Paired End Reads</option>
          </param>
          <when value="single">
            <param name="singlefasta" type="data" format="fasta" label="fasta file" />
          </when>
          <when value="paired">
            <param name="fasta1" type="data" format="fasta" label="Read 1 fasta file" />
            <param name="fasta2" type="data" format="fasta" label="Read 2 fasta file" />
          </when>
        </conditional>
        <expand macro="bowtie_options"/>
      </when>
      <when value="sam">
          <!-- convert-sam-for-rsem /ref/mouse_125 input.sam -o input_for_rsem.sam -->
          <param name="matepair" type="select" label="Library Type">
            <option value="single">Single End Reads</option>
            <option value="paired">Paired End Reads</option>
          </param>
          <param name="rsem_sam" type="data" format="rsem_sam" label="RSEM formatted SAM file" />
      </when>
    </conditional>
    <expand macro="rsem_options"/>
    <conditional name="rsem_outputs">
      <param name="result_bams" type="select" label="Create bam results files" 
             help="In addition to the transcript-coordinate-based BAM file output, also output a BAM file with the read alignments in genomic coordinates" >
        <option value="none">No BAM results files</option>
        <option value="default" selected="true">Transcript BAM results file</option>
        <option value="both">Transcript and genome BAM results files</option>
      </param>
      <when value="none"/>
      <when value="default">
        <expand macro="sampling_for_bam"/>
      </when>
      <when value="both">
        <expand macro="sampling_for_bam"/>
      </when>
    </conditional>
  </inputs>



  <outputs>
    <data format="rsem_ref" name="reference_file" label="RSEM ${reference_name} reference"/>

    <data format="tabular" name="gene_abundances" label="${sample}.gene_abundances" from_work_dir="rsem_output.genes.results"/>
    <data format="tabular" name="isoform_abundances" label="${sample}.isoform_abundances" from_work_dir="rsem_output.isoforms.results"/>
    <data format="bam" name="transcript_bam" label="${sample}.transcript.bam" from_work_dir="rsem_output.transcript.bam" >
      <filter>rsem_outputs['result_bams'] != "none"</filter>
    </data>
    <data format="bam" name="transcript_sorted_bam" label="${sample}.transcript.bam" from_work_dir="rsem_output.transcript.sorted.bam" >
      <filter>rsem_outputs['result_bams'] != "none"</filter>
    </data>
    <data format="bam" name="genome_bam" label="${sample}.genome.bam" from_work_dir="rsem_output.genome.bam">
      <filter>rsem_outputs['result_bams'] == "both"</filter>
    </data>
    <data format="bam" name="genome_sorted_bam" label="${sample}.genome.sorted.bam" from_work_dir="rsem_output.genome.sorted.bam">
      <filter>rsem_outputs['result_bams'] == "both"</filter>
    </data>
    <data format="txt" name="log" label="${sample}.rsem_log"/>
  </outputs>

<!--
  <tests>
    <test>
      <param name="ref_type" value="genomic"/>
      <param name="reference_fasta_file" value="ref.fasta" ftype="fasta"/>
      <param name="gtf" value="ref.gtf" ftype="gtf"/>
      <param name="reference_name" value="ref"/>
      <output name="rsem_ref">
        <assert_contents>
          <has_text text="ref.grp" />
        </assert_contents>
      </output>
    </test>
    <test>
      <param name="sample" value="rsem_sample"/>
      <param name="refSrc" value="history"/>
      <param name="rsem_ref" value="RSEM_ref_reference.rsem_ref"/>
      <param name="format" value="fastq"/>
      <param name="matepair" value="single"/>
      <param name="singlefastq" value="test.fq" ftype="fastqsanger"/>
      <param name="result_bams" value="none"/>
      <output name="gene_abundances"> 
        <assert_contents>
          <has_text text="ENST00000423562,ENST00000438504,ENST00000488147,ENST00000538476,ENST00000541675" />
        </assert_contents>
      </output>
      <output name="isoform_abundances"> 
        <assert_contents>
          <has_text text="ENST00000332831" />
        </assert_contents>
      </output>
      <output name="log"> 
        <assert_contents>
          <has_text text="Expression Results are written" />
        </assert_contents>
      </output>
    </test>
  </tests>
-->
  <help>

RSEM HOME PAGE - http://deweylab.biostat.wisc.edu/rsem/

NAME
    rsem-prepare-reference

SYNOPSIS
    rsem-prepare-reference [options] reference_fasta_file(s) reference_name

DESCRIPTION
    The rsem-prepare-reference program extracts/preprocesses the reference sequences and builds Bowtie indices using default parameters. 
    This program is used in conjunction with the 'rsem-calculate-expression' program.

INPUTS
    A fasta file of transcripts
    or
    A genome sequence fasta file and a GTF gene annotation file.  (When using UCSC data, include the related knownIsoforms.txt)

  </help> 
</tool> 
