<tool id="edger-repenrich" name="edgeR-repenrich" version="0.0.1">
    <description>Determines differentially expressed features from RepEnrich counts</description>
    <requirements>
        <requirement type="package" version="3.16.5">bioconductor-edger</requirement>
        <requirement type="package" version="3.30.13">bioconductor-limma</requirement>
    </requirements>
    <stdio>
        <regex match="Execution halted"
           source="both"
           level="fatal"
           description="Execution halted." />
        <regex match="Error in"
           source="both"
           level="fatal"
           description="An undefined error occurred, please check your input carefully and contact your administrator." />
        <regex match="Fatal error"
           source="both"
           level="fatal"
           description="An undefined error occurred, please check your input carefully and contact your administrator." />
    </stdio>
    <version_command>
    <![CDATA[
        echo $(R --version | grep version | grep -v GNU)", edgeR version" $(R --vanilla --slave -e "library(edgeR) &&
        cat(sessionInfo()\$otherPkgs\$edgeR\$Version)" 2> /dev/null | grep -v -i "WARNING: ")
    ]]>
    </version_command>
    <command>
    <![CDATA[
        #if $tximport.tximport_selector == 'tximport':
            #if $tximport.mapping_format.mapping_format_selector == 'gtf':
                ln -s '$tximport.mapping_format.gtf_file' mapping.gtf &&
            #else:
                ln -s '$tximport.mapping_format.tabular_file' mapping.txt &&
            #end if
        #end if

        #import json
        Rscript '${__tool_directory__}/deseq2.R'
            -o '$deseq_out'
            #if $pdf:
                -p '$plots'
            #end if
            #if $normCounts:
                -n '$counts_out'
            #end if
            #set $temp_factor_names = list()
            #for $factor in $rep_factorName:
                #set $temp_factor = list()
                #for $level in $factor.rep_factorLevel:
                    #set $count_files = list()
                    #for $file in $level.countsFile:
                        $count_files.append(str($file))
                    #end for
                    $temp_factor.append( {str($level.factorLevel): $count_files} )
                #end for
                $temp_factor.reverse()
                $temp_factor_names.append([str($factor.factorName), $temp_factor])
            #end for
            -f '#echo json.dumps(temp_factor_names)#'
            -t '$fit_type'
    ]]>
    </command>
    <inputs>
        <repeat name="rep_factorName" title="Factor" min="1">
            <param name="factorName" type="text" value="FactorName" label="Specify a factor name, e.g. genotype or age or drug_x"
                help="Only letters, numbers and underscores will be retained in this field">
                <sanitizer>
                    <valid initial="string.letters,string.digits"><add value="_" /></valid>
                </sanitizer>
            </param>
            <repeat name="rep_factorLevel" title="Factor level" min="2" default="2">
                <param name="factorLevel" type="text" value="FactorLevel" label="Specify a factor level, typical values could be 'wildtype', 'mutant' or 'control'"
                    help="Only letters, numbers and underscores will be retained in this field">
                    <sanitizer>
                        <valid initial="string.letters,string.digits"><add value="_" /></valid>
                    </sanitizer>
                </param>
                <param name="countsFile" type="data" format="tabular" multiple="true" label="Counts file(s)" help="Count files must have been generated by repenrich tool" />
            </repeat>
        </repeat>

        <param name="pdf" type="boolean" truevalue="1" falsevalue="0" checked="true"
            label="Visualising the analysis results"
            help="output an additional PDF with various plots and box plots" />
        <param name="normCounts" type="boolean" truevalue="1" falsevalue="0" checked="false"
            label="Output normalized counts table" />
    </inputs>
    <outputs>
        <data format="tabular" name="edger_out" label="edgeR result file on ${on_string}">
            <actions>
                <action name="column_names" type="metadata" default="GeneID,Base mean,log2(FC),StdErr,Wald-Stats,P-value,P-adj" />
            </actions>
        </data>
        <data format="pdf" name="plots" label="edgeR plots on ${on_string}">
            <filter>pdf == True</filter>
        </data>
        <data format="tabular" name="counts_out" label="Normalized counts file on ${on_string}">
            <filter>normCounts == True</filter>
        </data>
    </outputs>
<!--    <tests>
        <test>
        </test>
    </tests> -->
    <help>
<![CDATA[
.. class:: infomark

**What it does**

Estimate variance-mean dependence in count data from high-throughput sequencing assays and test for differential expression based on a model using the negative binomial distribution

**Inputs**

DESeq2_ takes count tables that generated from the htseq-count as input. Count tables must be generated for each sample individually. DESeq2 is capable of handling multiple factors that effect your experiment. The first factor you input is considered as the primary factor that affects gene expressions. You also input several secondary factors that might influence your experiment. But the final output will be changes in genes due to primary factor in presence of secondary factors. Each factor has two levels/states. You need to select appropriate count table from your history for each factor level.

The following table gives some examples of factors and their levels:

========= ============== ===============
Factor    Factor level 1 Factor level 2
--------- -------------- ---------------
Treatment Treated        Untreated
--------- -------------- ---------------
Condition Knockdown      Wildtype
--------- -------------- ---------------
TimePoint Day4           Day1
--------- -------------- ---------------
SeqType   SingleEnd      PairedEnd
--------- -------------- ---------------
Gender    Female         Male
========= ============== ===============

*Note*: Output log2 fold changes are based on primary factor level 1 vs. factor level2. Here the order of factor levels is important. For example, for the factor 'Treatment' given in above table, DESeq2 computes fold changes of 'Treated' samples against 'Untreated', i.e. the values correspond to up or down regulations of genes in Treated samples.

**Output**

DESeq2_ generates a tabular file containing the different columns and optional visualized results as PDF.

====== ==========================================================
Column Description
------ ----------------------------------------------------------
     1 Gene Identifiers
     2 mean normalised counts, averaged over all samples from both conditions
     3 the logarithm (to basis 2) of the fold change (See the note in inputs section)
     4 standard error estimate for the log2 fold change estimate
     5 Wald statistic
     6 p value for the statistical significance of this change
     7 p value adjusted for multiple testing with the Benjamini-Hochberg procedure
       which controls false discovery rate (FDR)
====== ==========================================================

.. _DESeq2: http://master.bioconductor.org/packages/release/bioc/html/DESeq2.html
]]>
    </help>
    <citations>
        <citation type="doi">10.1186/s13059-014-0550-8</citation>
    </citations>
</tool>
