<tool id="varscan_vaf" name="Compute VAFs from varscan VCFs" version="0.1">
    <description />
    <requirements>
        <requirement type="package" version="3.7.6">python</requirement>
    </requirements>
    <command detect_errors="exit_code"><![CDATA[
        python $__tool_directory__/varscan_vaf.py
            --input '$input'
            --output '$output'
    ]]></command>
    <inputs>
        <param format="vcf" label="VCF file" name="input" type="data"
               help="a VCF file generated by somatic varscan (normal and tumor genotype),
                     or having a compatible FORMAT column (9th column)"/>
    </inputs>
    <outputs>
        <data format="vcf" name="output" label="VCF with computed VAFs" />
    </outputs>
    <tests>
        <test>
            <param ftype="vcf" name="input" value="vcf_1.vcf" />
            <output file="computed_VAFs_1.vcf" name="output" />
        </test>
        <test>
            <param ftype="vcf" name="input" value="vcf_2.vcf" />
            <output file="computed_VAFs_2.vcf" name="output" />
        </test>
    </tests>
    <help>

**What it does**

+ Computes VAFs in normal and tumor samples.
+ Uses AD field of genotypes (##FORMAT ID=AD), composed of REF and ALT Read depths, separated by a comma.
+ A new genotype field 'VAF" (##FORMAT IF=VAF) is generated
+ VAF = AD(ALT) / (AD(ALT) + AD(REF))

-------

**Inputs**

1. A somatic varscan VCF with AD field in third position.
2. The AD field must be composed of two integers separated by a comma.

-------

**Output**

+ A VCF file
+ A line '##FORMAT=&lt;ID=VAF,Number=R,Type=float,Description="Variant Allele Frequency"&gt;' is added in the header
+ The VAF value is added in both normal and tumor genotype column, as a last field

    </help>
    <citations />
</tool>
