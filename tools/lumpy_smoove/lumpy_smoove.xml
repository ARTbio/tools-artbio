<tool id="lumpy_smoove" name="lumpy_smoove" version="@TOOL_VERSION@+galaxy@GALAXY_VERSION@">
    <description>find structural variants using the smoove workflow</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements" />
    <expand macro="stdio" />
    <command detect_errors="exit_code"><![CDATA[
    @pipefail@
    @set_fasta_index@

    #if $set_plan.plan_choice=='pair':
        ln -s '$set_plan.normal_bam' normal.bam &&
        ln -f -s '$set_plan.normal_bam.metadata.bam_index' normal.bam.bai &&
        ln -s '$set_plan.tumor_bam' tumor.bam &&
        ln -f -s '$set_plan.tumor_bam.metadata.bam_index' tumor.bam.bai &&
    #elif $set_plan.plan_choice=='single':
        ln -s '$set_plan.single_bam' single.bam &&
        ln -f -s '$set_plan.single_bam.metadata.bam_index' single.bam.bai &&
    #else:
        #for $sample in $set_plan.cohort:
            ln -s '$sample' '${sample.element_identifier}.bam' &&
            ln -f -s '$sample.metadata.bam_index' '${sample.element_identifier}.bam.bai' &&
        #end for
    #end if

    smoove call --name output
        #if $set_exclusion.choices=="yes":
            --exclude '$bedmask'
        #end if
            --fasta reference.fa
            --processes \${GALAXY_SLOTS:-4}
            --genotype
       #if $removepr:
            --removepr
       #end if
        *.bam &&
    gunzip -c output-smoove.genotyped.vcf.gz > '$vcf_call'

    ]]></command>
    <inputs>
        <expand macro="reference_source_conditional" />
        <conditional name="set_plan">
            <param name="plan_choice" type="select" label="Analysis mode" display="radio">
                <option value="pair" selected="true">Paired samples (e.g., tumor/normal)</option>
                <option value="single">Single sample</option>
                <option value="cohort">Small cohort (collection)</option>
            </param>
            <when value="pair">
                <param format="bam" name="normal_bam" type="data" label="Normal/Reference sample BAM"/>
                <param format="bam" name="tumor_bam" type="data" label="Tumor/Case sample BAM"/>
            </when>
            <when value="single">
                <param format="bam" name="single_bam" type="data" label="Input BAM file"/>
            </when>
            <when value="cohort">
                <param name="cohort" type="data_collection" format="bam" label="Input BAM collection"/>
            </when>
        </conditional>      

 
        <conditional name="set_exclusion">
            <param name="choices" type="select" label="Exclude genomic regions?" display="radio">
                <option value="no" selected="true">No</option>
                <option value="yes">Yes</option>
            </param>
            <when value="yes">
                <param format="bed" name="bedmask" type="data" label="BED file of regions to exclude" help="Provide a BED file of regions to ignore. See help section below for recommended files."/>
            </when>
            <when value="no">
            </when>
        </conditional>      
        <param name="removepr" type="boolean" checked="true" label="Remove paired-read/split-read probabilities" help="If unchecked, includes PR and POS fields (paired-read and split-read probabilities) in the VCF INFO column. This data can be useful for downstream filtering."/>
   </inputs>

    <outputs>
        <data format="vcf" name="vcf_call" label="lumpy-smoove Variant Calling" />
    </outputs>

    <tests>
        <!-- Test 1: Paired mode with exclusion and removepr -->
        <test expect_num_outputs="1">
            <param name="reference_source_selector" value="history" />
            <param name="ref_file" value="chrI-ce11.fa"/>
            <conditional name="set_plan">
                <param name="plan_choice" value="pair"/>
                <param name="normal_bam" value="celegans_RG_1.bam"/>
                <param name="tumor_bam" value="celegans_RG_2.bam"/>
            </conditional>
            <conditional name="set_exclusion">
                <param name="choices" value="yes"/>
                <param name="bedmask" value="exclude.bed"/>
            </conditional>
            <param name="removepr" value="true"/>
            <output name="vcf_call" ftype="vcf" file="result_paired.vcf" lines_diff="12"/>
        </test>
        <!-- Test 2: Cohort mode -->
        <test expect_num_outputs="1">
            <conditional name="set_plan">
                <param name="plan_choice" value="cohort"/>
                <param name="cohort">
                    <collection type="list">
                        <element name="1" ftype="bam" value="celegans_RG_1.bam"/>
                        <element name="2" ftype="bam" value="celegans_RG_2.bam"/>
                    </collection>
                </param>
            </conditional>
            <param name="reference_source_selector" value="history" />
            <param name="ref_file" value="chrI-ce11.fa"/>
            <conditional name="set_exclusion">
                <param name="choices" value="no"/>
            </conditional>
            <param name="removepr" value="false"/>
            <output name="vcf_call" ftype="vcf" file="result_cohort.vcf" lines_diff="12"/>
        </test>
        <!-- Test 3: Single mode -->
        <test expect_num_outputs="1">
            <param name="reference_source_selector" value="history" />
            <param name="plan_choice" value="single" />
            <param name="ref_file" value="chrI-ce11.fa"/>
            <param name="single_bam" value="celegans_RG_1.bam"/>
            <conditional name="set_exclusion">
                <param name="choices" value="no"/>
            </conditional>
            <param name="removepr" value="false"/>
            <output name="vcf_call" ftype="vcf" file="result_single.vcf" lines_diff="12"/>
        </test>
    </tests>

    <help>
**What it does**

**smoove** simplifies and speeds up Structural Variant (SV) calling and genotyping for short reads. It acts as a wrapper for the SV caller `lumpy` and the genotyper `svtyper`. It improves specificity by removing many spurious alignment signals that are indicative of low-level noise and often contribute to spurious calls.

This Galaxy tool wraps the ``smoove call`` command for single samples, paired samples (e.g. tumor/normal), or small cohorts.

-----

**Inputs**

* **BAM files**: This tool accepts single, paired, or a collection of BAM files. Only alignments produced by BWA-mem have been tested.
    
    .. class:: warningmark
    
    It is mandatory for proper genotyping that **BAM files contain read group information** (the ``@RG`` tag must be present in the BAM header).

* **Exclude genomic regions? (Recommended)**: This option allows you to provide a BED file of regions to ignore during the analysis. This is highly recommended to reduce false positives.

    **Why exclude regions?**
    Certain regions of the human genome are notoriously difficult for short-read alignment due to their repetitive or highly variable nature. This includes centromeres, telomeres, segmental duplications, and regions with a high density of mobile elements (like ALUs) or variable genes (like HLA, immunoglobulin, and T-cell receptor genes). Reads mapping ambiguously to these regions can be misinterpreted as evidence for structural variants, leading to a high number of false-positive calls. Using an exclusion file (or "blacklist") masks these problematic regions, significantly improving the accuracy of SV detection.

    **Recommended Files (ENCODE Blacklists)**
    These lists are stable for a given genome assembly and are still the standard. The files below are hosted by the UCSC Genome Browser.

    - For **GRCh38 / hg38**: `Download ENCODE Blacklist v2 <http://hgdownload.soe.ucsc.edu/goldenPath/hg38/encodeDCC/wgEncodeMapability/wgEncodeDacMapabilityConsensusExcludable.bed.gz>`_
    - For **GRCh37 / hg19**: `Download ENCODE Blacklist <http://hgdownload.soe.ucsc.edu/goldenPath/hg19/encodeDCC/wgEncodeMapability/wgEncodeDacMapabilityConsensusExcludable.bed.gz>`_

-----

**How it works**

In short, ``smoove`` streamlines the SV calling process by:

1.  Extracting split and discordant reads required by `lumpy` from each BAM file in parallel.
2.  Filtering these reads to remove signals from high-coverage and spurious regions.
3.  Calculating per-sample metrics (e.g., insert size distribution) required by `lumpy`.
4.  Running `lumpy` to detect SV breakpoints.
5.  Genotyping the discovered variants across all samples using `svtyper`.
6.  Producing a final, sorted VCF file.

-----

**smoove GitHub**

For more advanced options and details, please refer to the `smoove GitHub repository <https://github.com/brentp/smoove>`_.

    </help>

    <citations>
    <citation type="doi">10.1186/gb-2014-15-6-r84</citation>
  </citations>
</tool>

